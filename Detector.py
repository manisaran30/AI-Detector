import streamlit as st  
import os
import re
from dotenv import load_dotenv  
import google.generativeai as genai  
load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
def get_ai_detection_response(content):
    model = genai.GenerativeModel('gemini-1.5-flash')
    prompt = (
        f"Analyze the following text and estimate the percentage of it that was likely generated by AI. "
        f"Respond with only the numeric percentage (e.g., 78). Do not include any other words or symbols.\n\n"
        f"Text:\n\"{content}\""
    )
    response = model.generate_content(prompt)
    return response.text.strip()
def extract_percentage_from_result(result):
    match = re.search(r'\b(\d{1,3})\b', result)
    if match:
        percentage = int(match.group(1))
        return min(max(percentage, 0), 100)  # Clamp between 0 and 100
    return None
st.set_page_config(page_title="AI Detection Meter", page_icon="🤖", layout="wide")
st.title("AI Detection Meter 📊")
st.write("Evaluate how much of your content is AI-generated using Google's Gemini AI.")
input_text = st.text_area("Enter Text for AI Detection", height=150)
if st.button("🔍 Detect AI in Text"):
    if input_text:
        with st.spinner("Analyzing text... ⏳"):
            result = get_ai_detection_response(input_text)
        
        st.success("✅ Analysis Complete!")
        
        percentage = extract_percentage_from_result(result)
        if percentage is not None:
            st.subheader("🧠 AI Detection Score")
            st.metric(label="AI-Generated Percentage", value=f"{percentage}%")
            st.progress(percentage / 100)

            with st.expander("🔍 Raw AI Response"):
                st.code(result, language="text")
        else:
            st.error("❌ Couldn't detect AI percentage. Please try again with different content.")
    else:
        st.warning("⚠️ Please enter some text above.")
        
st.caption("Note: This tool provides an estimated AI score based on Gemini's language analysis and may not be 100% accurate.")
